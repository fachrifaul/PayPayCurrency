//
//  ExchangeRatesViewController.swift
//  PayPayCurrency
//
//  Created by Fachri Febrian on 15/08/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ExchangeRatesDisplayLogic: AnyObject {
    func displayFromCurrency(viewModel: ExchangeRates.PickCurrency.ViewModel)
    func displayLatestConversionRate(viewModel: ExchangeRates.LatestRate.ViewModel)
}

class ExchangeRatesViewController: UIViewController, ExchangeRatesDisplayLogic {
    var interactor: ExchangeRatesBusinessLogic?
    var router: (NSObjectProtocol & ExchangeRatesRoutingLogic & ExchangeRatesDataPassing)?
    
    @IBOutlet weak var currencyTextField: UITextField!
    @IBOutlet weak var fromCurrencyButton: UIButton!
    @IBOutlet weak var convertButton: UIButton!
    @IBOutlet weak var currencyCollectionView: UICollectionView!
    
    private let itemsPerRow: CGFloat = 3
    private let cvInsets = UIEdgeInsets(
        top: 10.0,
        left: 20.0,
        bottom: 10.0,
        right: 20.0
    )
    
    var valueCurrency = Currency(currency: "USD", country: "United States Dollar")
    var rates: [ExchangeRates.LatestRate.ViewModel.DisplayedRate] = []
    private var inputValueCurrency = ""
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ExchangeRatesInteractor()
        let presenter = ExchangeRatesPresenter()
        let router = ExchangeRatesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupUI() {
        currencyTextField.textColor = .black
        currencyTextField.keyboardType = .decimalPad
        currencyTextField.delegate = self
        currencyTextField.text = "1.00"
        
        currencyCollectionView.register(
            UINib(nibName: "CurrencyCell", bundle: nil),
            forCellWithReuseIdentifier: "CurrencyCell"
        )
        
        currencyCollectionView.delegate = self
        currencyCollectionView.dataSource = self
        currencyCollectionView.showsHorizontalScrollIndicator = false
        
        let layout: UICollectionViewFlowLayout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.itemSize = CGSize(
            width: self.currencyCollectionView.frame.size.width,
            height: 100)
        currencyCollectionView.collectionViewLayout = layout
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        fetchLatestConversionRate()
    }
    
    // MARK: Fetch latest rate
    func fetchLatestConversionRate() {
        let request = ExchangeRates.LatestRate.Request()
        interactor?.fetchLatestConversionRate(request: request)
    }
    
    func displayFromCurrency(viewModel: ExchangeRates.PickCurrency.ViewModel) {
        if let currency = viewModel.currency {
            self.fromCurrencyButton.setTitle(currency.currency, for: .normal)
            self.valueCurrency = currency
        }
    }
    
    func displayLatestConversionRate(viewModel: ExchangeRates.LatestRate.ViewModel) {
        print("displayLatestConversionRate \(viewModel.rates.count)")
        if Service.isConnectedToNetwork() && viewModel.rates.isEmpty {
            self.displayAlertNoInternet()
        } else {
            rates = viewModel.rates
        }
        
        currencyCollectionView?.reloadData()
    }
    
    
    // MARK: Actions
    @IBAction func changeCurencyAction(_ sender: Any) {
        router?.routeToCountryCurrencies(segue: nil)
    }
    
    @IBAction func convertCurencyAction(_ sender: Any) {
        if let value = Double(self.currencyTextField.text ?? "") {
            interactor?.convertRate(
                request: ExchangeRates.LatestRate.Request(
                    value: value,
                    currency: valueCurrency
                )
            )
        }
    }
}

extension ExchangeRatesViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return rates.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(
            withReuseIdentifier: "CurrencyCell",
            for: indexPath
        ) as! CurrencyCell
        
        let rate = rates[indexPath.row]
        cell.currencyNameLbl.text = rate.name
        cell.currencyAmountLbl.text = "\(rate.amount)"
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let paddingSpace = cvInsets.left * (itemsPerRow + 1)
        let availableWidth = view.frame.width - paddingSpace
        let widthPerItem = availableWidth / itemsPerRow
        
        return CGSize(width: widthPerItem, height: widthPerItem)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return cvInsets
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return cvInsets.left
    }
    
}


extension ExchangeRatesViewController: UITextFieldDelegate {
    
    func textField(
        _ textField: UITextField,
        shouldChangeCharactersIn range: NSRange,
        replacementString string: String
    ) -> Bool {
        if textField.text != "" || string != "" {
            let value = (textField.text ?? "") + string
            return Double(value) != nil
        }
        return true
    }
}
