//
//  ExchangeRatesInteractor.swift
//  PayPayCurrency
//
//  Created by Fachri Febrian on 15/08/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ExchangeRatesBusinessLogic {
    func fetchLatestConversionRate(request: ExchangeRates.LatestRate.Request)
    func convertRate(request: ExchangeRates.LatestRate.Request)
}

protocol ExchangeRatesDataStore {
    var currency: Currency? { set get }
    var rates: [String: Double] { get }
}

class ExchangeRatesInteractor: ExchangeRatesBusinessLogic, ExchangeRatesDataStore {
    var presenter: ExchangeRatesPresentationLogic?
    var worker: ExchangeRatesWorker = ExchangeRatesWorker()
    
    var rates: [String: Double] = [:]
    var tempValue: Double = 1.0
    var tempCurrency = Currency(currency: "USD", country: "United States Dollar")
    
    var currency: Currency? {
        set {
            setCurrency(
                value: tempValue,
                currency: newValue
            )
        }
        get {
            return tempCurrency
        }
    }
    
    // MARK: Fetch latest rate
    
    func fetchLatestConversionRate(request: ExchangeRates.LatestRate.Request) {
        worker.fetchLatestConversionRate { [weak self] rates in
            self?.rates = rates
            self?.setCurrency(
                value: request.value,
                currency: self?.currency
            )
        }
    }
    
    // MARK: Covert rate
    func convertRate(request: ExchangeRates.LatestRate.Request) {
        setCurrency(
            value: request.value,
            currency: currency
        )
    }
    
    private func setCurrency(
        value: Double,
        currency: Currency?
    ) {
        guard let currency = currency else { return }
        tempValue = value
        tempCurrency = currency
        
        presenter?.presentFromCurrency(
            response: ExchangeRates.PickCurrency.Response(currency: currency)
        )
        
        var newRates: [String: Double] = [:]
        
        for rate in rates {
            if (currency.currency == rate.key) {
                newRates[rate.key] = rate.value * value
            } else {
                if let valueRate: Double = rates[currency.currency],
                   let outputRate: Double = rates[rate.key] {
                    let multiplier: Double = outputRate / valueRate
                    let roundRate = Double(round(1000 * multiplier * value) / 1000)
                    newRates[rate.key] = roundRate
                    
                } else {
                    newRates[rate.key] = rate.value * value
                }
            }
        }
        
        presenter?.presentLatestConversionRate(
            response: ExchangeRates.LatestRate.Response(rates: newRates, currency: currency)
        )
    }
}
