//
//  CountryCurrencyViewController.swift
//  PayPayCurrency
//
//  Created by Fachri Febrian on 15/08/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CountryCurrencyDisplayLogic: AnyObject {
    func displayCurrencies(viewModel: CountryCurrency.Currencies.ViewModel)
}

class CountryCurrencyViewController: UIViewController, CountryCurrencyDisplayLogic {
    var interactor: CountryCurrencyBusinessLogic?
    var router: (NSObjectProtocol & CountryCurrencyRoutingLogic & CountryCurrencyDataPassing)?
    
    @IBOutlet weak var currencyTableView: UITableView!
    
    var currencies: [Currency] = []
    var currency: Currency?
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CountryCurrencyInteractor()
        let presenter = CountryCurrencyPresenter()
        let router = CountryCurrencyRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    func setupUI() {
        self.currencyTableView.register(UITableViewCell.self, forCellReuseIdentifier: "currencyCell")
        self.currencyTableView.delegate = self
        self.currencyTableView.dataSource = self
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        fetchCurrencies()
    }
    
    // MARK: Fetch Currencies
    
    func fetchCurrencies() {
        let request = CountryCurrency.Currencies.Request()
        interactor?.fetchCurrencies(request: request)
    }
    
    func displayCurrencies(viewModel: CountryCurrency.Currencies.ViewModel) {
        print("displayCurrencies \(viewModel.currencies.count)")
        
        if Service.isConnectedToNetwork() && viewModel.currencies.isEmpty {
            self.displayAlertNoInternet()
        } else {
            currencies = viewModel.currencies
        }
        
        currencyTableView.reloadData()
    }
}


extension CountryCurrencyViewController : UITableViewDataSource, UITableViewDelegate {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.currencies.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "currencyCell")
        cell.textLabel?.text = currencies[indexPath.row].currency
        cell.detailTextLabel?.text = currencies[indexPath.row].country
        return cell
    }
    
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        currency = currencies[indexPath.row]
        router?.popViewController(segue: nil);
    }
    
}
